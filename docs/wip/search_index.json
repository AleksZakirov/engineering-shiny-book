[
["successfulshinyapp.html", "Chapter 1 About Successful Shiny Apps 1.1 A (very) short introduction to Shiny 1.2 What is a complex Shiny Application? 1.3 What is a successful Shiny App?", " Chapter 1 About Successful Shiny Apps I Too Like to Live Dangerously .right{ text-align: right;} Austin Powers 1.1 A (very) short introduction to Shiny If you are reading this page, chances are you already know what a Shiny application (“Shiny app”) is — a web application that communicates with R, built in R, and working with R. The beauty of {shiny} is that it makes it easy for anybody to create a small app in a matter of hours. With small and minimal Shiny apps, no knowledge of HTML, CSS or JavaScript is required. With very little training, you can rapidly create a proof-of-concept (POC) for a data-product and showcase an algorithm or present your results in an elegant and accessible to build user interface. The first version of {shiny} was published in 2012. Since then, it has been one of the top project of the RStudio team. At the time of writing these lines (January 2020), there are more than 4600 commits in the master branch of the main GitHub repository, made by 46 contributors. It is now downloaded around 400K times a month, according to cranlogs, and has 711 reverse dependencies (package that depends on it) according to devtools::revdep(\"shiny\"). If you are very new to Shiny, this book might feel a little bit complex. Indeed, it relies on the assumption that you already know how to build (at least basic) Shiny applications and that you want to push your Shiny skills to the next level. If you are very new to Shiny, we suggest you start with the Mastering Shiny book before reading the present book. Ready to get started with complex Shiny App? 1.2 What is a complex Shiny Application? One of the unfortunate things about reality is that it often poses complex problems that demand complex solutions .right{ text-align: right;} The Art of Unix Programming 1.2.1 Reaching the cliff of complexity After a few hours of practice, things seems quite straightforward when it comes to small prototypes or proof of concepts. But things change when your application reaches “the cliff of complexity”1. But what do we mean by complexity? Getting a clear definition is not an easy task2 as it very depends on who is concerned and who you are talking to. A good definition is the one from The Art of Unix Programming: “Complex software is harder to think about, harder to test, harder to debug, and harder to maintain — and above all, harder to learn and use.” But let us try to come with a definition that will serve us in the context of engineering Shiny applications. When building software, we can think of complexity from two points of view: the complexity as it is seen by the coder, and the complexity as it is seen by the customer / end user.3 With great complexity comes great responsibility When your program reaches this state, there is a lot of potential for failure, be it from a developer or user perspective. For the code, bugs are harder to anticipate: it is hard to think about all the different paths the software can follow and difficult to detect bugs because they are deeply nested in the numerous routines the app is doing. It is also hard to think about what the state of your app is at a given moment because of the numerous inputs and outputs your app contains. From the user perspective, the more complex an app is, the steeper the learning curve. Indeed, the user will have to invest more time learning how the app works, and will be even more disappointed if ever they realize this time has been a waste. 1.2.1.1 Developers complexity An app is to be considered complex when it is big enough in terms of size and functionality that it makes it impossible to reason about it at once, and you must rely on tools to understand and handle this complexity. This type of complexity is called implementation complexity. One of the goal of this book is to present you a methodology and toolkit that will help you reduce this form of complexity. 1.2.1.2 Customers and users complexity Customers and end user see complexity as interface complexity. Interface complexity can be driven by a lot of elements, for example the probability of making an error while using the app, the difficulty to understand the logical progression in the app, the presence of unfamiliar behaviour or terms, visual distractions… This book will also bring you strategy to help you cope with the need for simplification when it comes to designing interface. 1.2.2 Balancing complexities Designing an app means taking decisions to find a good balance between implementation and interface complexity, i.e. between developers and users sources of complexity. Lowering one source of complexity usually means to increase the other. Drawing a line between the two very much depends on the kind of project you are working on, and on the kind of users that will use your app. This usually requires to restrain yourself from implementing too much, and still create an application that is easy to use. For example, there is something common with Shiny: what we can call “the too much reactivity pattern”. In some cases, coders try to make everything reactive: e.g., three sliders and a dropdown input, all updating a single plot. This behavior lowers the interface complexity: users do not have to think a lot about what they are doing, they move sliders, change the input and the plot updates. But this kind of pattern can make the app compute too many things: users rarely go to the slider value they need on their first try. They usually miss what they actually want to select in an input. Each time a slider or an input has changed, R will calculate a new plot. Thus, a lot of not necessary computation for R. One solution can be to delay reactivity or to cache things so that R computes fewer things. But that comes with a cost: handling delayed reactivity and caching elements increases implementation complexity. Another solution is to add an “update plot” button, which updates the plot only when the user clicks on it. This pattern makes it easier to control reactivity from an implementation side. But this complexify the interface for the users who have to perform another action in addition to changing their inputs. Another good example is {shiny}’s dateRangeInput() function. This function requires the user to choose a starting date and an ending date. However, the function allows to choose a start posterior to the end (which is the behavior of the JavaScript plugin used in {shiny} to create this input). If theses dates are used to filter data upper tjan starting date and lower than ending date, this behaviour will be problematic for your application. Handling this special case is doable: with a little bit of craft, you can watch what the user inputs and throw an error if the start is after the end.4 That solution increases implementation complexity, while leaving it as is requires the user to think about whether or not the starting date is before the ending date, thus increasing the interface complexity. 1.2.3 Assessing code complexity On the developer side, you need to reduce code complexity to be able to create a mental model of the functionning of your application so that you can add functionnalities, debug, test and maintain your code for production. Before starting the project, you can try to identify potential sources of complexities and identify spots where complexity will not be necessary. Some prior questions can help you in this way (we will develop that later in this book). Your knowledge will help you spot asked features that will be hard, long to implement. But are they all necessary ? As the developer responsible of the project, you will have to ask some questions to users about how much the application will be used, how frequently, by what kind of users, what is the main purpose of the app, how critical is the success of the app for the customer… Thus you can propose alternatives that will balance complexity between user and developers. But at some point, you will start writing code and will have to write unit tests, check the consequences of all the inputs of the Shiny interface on your code, integrate changes… To be able to build a successful Shiny application, the main developers will have to have a mental representation of the entire code, which will not be possible if there is too much complexity. Some tools and measures may help warn you about the complexity of the code you are developing. 1.2.3.1 Codebase size The total number of lines of code or the number of files may be good clue of potential complexity if used as an order of magnitude (100, 1000, 10000 lines), but do not reduce number of lines at the cost of readability. R is very permissive when it comes to indentation and line breaks, and, unlike JavaScript or CSS, it is generally not minified5. Number of lines of code depends on your coding style and the packages you are using. Consider this piece of valid R code: iris[ 1 : 5, &quot;Species&quot; ] ## [1] setosa setosa setosa setosa setosa ## Levels: setosa versicolor virginica Six lines of code for something that could also be written in one line. iris[1:5, &quot;Species&quot;] ## [1] setosa setosa setosa setosa setosa ## Levels: setosa versicolor virginica In other words, using this kind of writing style can make the code base larger in term of lines, without really adding complexity to the general program. Another drawback of this metric is that it focuses on numbers instead of readability, and in the long run, yes, readability matters.6 For example, {tidyverse} packages encourage the use of the pipe (%&gt;%)7 with one function by line. This eases readability, but produces many lines in the end code. Still, this metric can be useful to reinforce what you have learned from other metrics. It is rather unlikely that you will find this “extreme” coding style we showed above, and even if it might not make sense to compare two code base that just differ by 1 or 2 % of lines of code, it is very likely that a code base which is ten, one hundred, one thousand times larger is a more complex software. Another good sign related to this metric is the number of files in the project: R developers tend to split their functions into several files, so the more files you will find in a project, the larger the code base is. Numerous files can also be a sign of maintenance complexity. It may be harder to reason about an app logic split into several files than about something that fits into one linear code inside one file. Altough, you can define files that respect the visual structure of the application, with explicit filenames. If you want to use the number of lines metric, you can directly use R with the {cloc} package, available at https://github.com/hrbrmstr/cloc. if (!requireNamespace(&quot;cloc&quot;)){ remotes::install_github(&quot;hrbrmstr/cloc&quot;) } For example, let us compare a rather big package ({shiny}) with a small one ({attempt}): library(cloc) library(dplyr) shiny_cloc &lt;- cloc_cran(&quot;shiny&quot;, .progress = FALSE, repos = &quot;http://cran.irsn.fr/&quot; ) attempt_cloc &lt;- cloc_cran(&quot;attempt&quot;, .progress = FALSE, repos = &quot;http://cran.irsn.fr/&quot; ) clocs &lt;- bind_rows( shiny_cloc, attempt_cloc ) # Counting lines of code clocs %&gt;% group_by(pkg) %&gt;% summarise( loc = sum(loc) ) ## # A tibble: 2 x 2 ## pkg loc ## &lt;chr&gt; &lt;int&gt; ## 1 attempt 4011 ## 2 shiny 71478 # Counting files clocs %&gt;% group_by(pkg) %&gt;% summarise( files = sum(file_count) ) ## # A tibble: 2 x 2 ## pkg files ## &lt;chr&gt; &lt;int&gt; ## 1 attempt 35 ## 2 shiny 269 Here, with these two metrics, we can safely assume that {shiny} is a more complex package than {attempt}. 1.2.3.2 Cyclomatic complexity Cyclomatic complexity is a software engineering measure which allows to define the number of different linear paths a piece of code can take, the higher the number of paths through one function, the harder is the mental model build. Cyclomatic complexity is computed based on a control-flow graph8 representation of an algorithm. The complexity number is then computed by taking the number of nodes, and subtracting the number of edges plus two times the number of connected components of this graph: \\(M = E − N + 2P\\), where \\(M\\) is the measure, \\(E\\) the number of edges, \\(N\\) the number of nodes and \\(2P\\) is 2 time the number of connected components. We will not go deep into this topic, as there are a lot things going on in this computation and you can find many documentation about this online. Please refer to the bibliography for further readings about the theory behind this measurement. In R, the cyclomatic complexity is computed with the {cyclocomp} package, which can be installed from CRAN with: install.packages(&quot;cyclocomp&quot;) The cyclocomp package comes with three main functions: cyclocomp(), cyclocomp_package(), and cyclocomp_package_dir(). The one we will be interested in is cyclocomp_package_dir(): building successful shiny apps with the {golem} framework (we will get back on that later) means you will be building your app as a package. You can then use cyclocomp_package_dir() to compute the complexity of your app. Here is for example the cyclomatic complexity of the default golem template: library(cyclocomp) cyclocomp_package(&quot;golex&quot;) %&gt;% head() ## name cyclocomp ## 1 app_server 1 ## 2 app_ui 1 ## 3 golem_add_external_resources 1 ## 4 run_app 1 And the one from another small application: cyclocomp_package(&quot;tidytuesday201942&quot;) %&gt;% head() ## name cyclocomp ## 24 mod_dataviz_ui 8 ## 23 mod_dataviz_server 7 ## 35 rv 6 ## 14 display 4 ## 39 undisplay 4 ## 37 tagRemoveAttributes 3 And, finally, the one for {shiny}: cyclocomp_package(&quot;shiny&quot;) %&gt;% head() ## name cyclocomp ## 507 untar2 75 ## 119 diagnoseCode 54 ## 399 runApp 50 ## 155 find_panel_info_non_api 37 ## 381 renderTable 37 ## 105 dataTablesJSON 34 And, bonus, this cyclocomp_package() function can also be used to retrieve the number of functions inside the package. So, as The Clash said, “what are we gonna do now?” Splitting things into smaller pieces lower the local cyclomatic complexity as passing twice into the same block of code is reduce with wisely chosen unit pieces. Leveraging the strength of S3 methods to split elements: if you have a function that behave differently based on the type of the input, generics and methods are easier to reason about than if statements inside a larger function. But that is not a magic solution: (A) because the global complexity of the app is not lowered by splitting things into pieces, (B) because the deeper the call stack, the harder it can be to reason about the big picture. 1.2.3.3 Other measures for code complexity Complexity can come from other sources: unsufficient code coverage leading to bugs that are hard to spot, dependencies that breaks the implementation, old package, or a lot of other things. We can use the {packageMetrics2} package to spot multiple metrics like the number of dependencies, the code coverage, the number of releases. This also includes number of lines of R code and cyclomatic complexity. library(packageMetrics2) frame_metric &lt;- function(pkg){ metrics &lt;- package_metrics(pkg) tibble::tibble( n = names(metrics), val = metrics, expl = list_package_metrics()[names(metrics)] ) } frame_metric(&quot;golem&quot;) %&gt;% knitr::kable() ## Metrics: ARR ATC DWL DEP DPD CCP FLE FRE LIB LLE LNC LNR LRE NAT NTF NUP OGH SAP SEM SEQ SWD VIG n val expl ARR 0 Number of times = is used for assignment ATC NA Author Test Coverage DWL 7818 Number of Downloads DEP 27 Num of Dependencies DPD 1 Number of Reverse-Dependencies CCP 2.33898305084746 Cyclomatic Complexity FLE 16.8833333333333 Average number of code lines per function FRE 2019-08-05T14:50:02+00:00 Date of First Release LIB 0 Number of library and require calls LLE 26 Number of code lines longer than 80 characters LNC 0 Number of lines of compiled code LNR 1464 Number of lines of R code LRE 2019-08-05T14:50:02+00:00 Date of Last Release NAT 0 Number of attach and detach calls NTF 0 Number of times T/F is used instead of TRUE/FALSE NUP 0 Updates During the Last 6 Months OGH 1 Whether the package is on GitHub SAP 1 Number of sapply calls SEM 0 Number of trailing semicolons in the code SEQ 0 Number of 1:length(vec) expressions SWD 18 Number of setwd calls VIG 4 Number of vignettes frame_metric(&quot;shiny&quot;) %&gt;% knitr::kable() ## Metrics: ARR ATC DWL DEP DPD CCP FLE FRE LIB LLE LNC LNR LRE NAT NTF NUP OGH SAP SEM SEQ SWD VIG n val expl ARR 14 Number of times = is used for assignment ATC 29.2461947330273 Author Test Coverage DWL 12107245 Number of Downloads DEP 22 Num of Dependencies DPD 722 Number of Reverse-Dependencies CCP 3.79710144927536 Cyclomatic Complexity FLE 24.2420168067227 Average number of code lines per function FRE 2012-12-01T07:16:17+00:00 Date of First Release LIB 1 Number of library and require calls LLE 424 Number of code lines longer than 80 characters LNC 0 Number of lines of compiled code LNR 24737 Number of lines of R code LRE 2019-10-10T11:50:02+00:00 Date of Last Release NAT 0 Number of attach and detach calls NTF 0 Number of times T/F is used instead of TRUE/FALSE NUP 1 Updates During the Last 6 Months OGH 1 Whether the package is on GitHub SAP 10 Number of sapply calls SEM 1 Number of trailing semicolons in the code SEQ 0 Number of 1:length(vec) expressions SWD 6 Number of setwd calls VIG 0 Number of vignettes If you are building you Shiny application with {golem}, a framework for building shiny apps, you can use the DESCRIPTION file, the one that contains the list of dependencies, as a starting point to explore these metrics for your dependencies: desc::desc_get_deps(&quot;golex/DESCRIPTION&quot;) ## type package version ## 1 Imports shiny * ## 2 Imports golem * # See also attachment::att_from_description(&quot;golex/DESCRIPTION&quot;) ## [1] &quot;golem&quot; &quot;shiny&quot; 1.2.4 Production Grade Software Engineering The use of R has evolved since its initial version released in 1995, using it 25 years later, as a tool to build softwares released in production, is a challenge. Complexity is still frowned upon by a lot of developers, notably because it has been seen as something to avoid according to the Unix philosophy. But there are dozens of reasons why an app can become complex: for example, the question your app is answering is quite complicated and involves a lot of computation and routines. The resulting app is rather ambitious and implements a lot of features, etc. So yes, there is a chance that if you are reading this page, you are working or are planning to work on a complex Shiny app. And this is not necessarily a bad thing! Shiny apps can definitely be used to implement production-grade9 software, but production-grade software implies production-grade software engineering. To make your project a success, you need to use tools that reduce the complexity of your app and ensure that your app is resilient to aging. In other words, production-grade Shiny apps requires working with a software engineering mindset, which is not always an easy task in the R world. Many developers in the R world have learned R as a tool for data analysis, building model, making statistics, not really as a tool for building softwares. Before {shiny}, a few graphical interfaces were built using {tcltk}, as tools for decision-making for instance. But the arrival of {shiny} has drastically increased the potential of R for software building. Its accessibility is also one of the sources of its success in multiple fields, in particular out of the academics, source of the R development. This changing context requires different mindsets, skills, and tools. With {shiny}, as we said before, it is quite easy to prototype a simple app, without any “hardcore” software engineering skills. And when we are happy with our little proof of concept, we are tempted to add something new. And another. And another. And without any structured methodology, we are almost certain to reach the cliff of complexity very soon and end up with a code base that is hardly (if ever) ready to be refactored to be sent to production. The good news is that building a complex app with R (or with any other language) is not an impossible task. But this requires planning, rigor, and correct engineering. This is what this book is about: how to organise your Shiny App in a way that is time and code efficient, and how to use correct engineering to make your app a success. 1.3 What is a successful Shiny App? Your application does not have to be complex to be successful. Even more, in a world where “less is more”, the more you can reduce your application complexity, the more you will be prepared for success. So what is a successful Shiny app? Defining such a metric is not an easy a task, but we can extract some common patterns when it comes to applications that would be considered successful. 1.3.1 It exists First of all, an app is successful if it was delivered. In other words, the developer team was able to move from specification to implementation, testing then delivering. This is a very engineering-oriented definition of success, but it is a pragmatic one: an app that never reaches the state of usability is not a successful app, as something along the way has blocked the process of finishing the code. This implies a lot of things. Mostly it implies that the team was able to organise itself in an efficient way, so that they were able to work together in making the project a success. Anybody that has already worked on a code base as a team knows it is not an easy task. 1.3.2 It is accurate The app was delivered, and it answers the question it is supposed to answer, or serves the purpose it is supposed to serve. Delivering is not the only thing to keep in mind: you can deliver a working app but it might not work in the way it is supposed to work. Just as before, accuracy means that between the moment the idea appears in someone’s mind and the moment the app is actually ready to be used, everybody was able to work together toward a common goal. 1.3.3 It is usable The app was delivered, it serves the purpose, and it is user-friendly. Unless you are coding for the sake of the art, there will always be one or more end users. And if these people cannot use the app because it is too hard to use, too hard to understand, because it is too slow or there is no inherent logic in how the user experience is designed, then it is inappropriate to call the app is a success. 1.3.4 It is immortal Of course this is a little bit far fetched, but when designing the app, you should set the ground for robustness in time and aim at a (theoretical) immortality of the app. Planning for the future is a very important component of a successful Shiny App project. Once the app is out, it is successful if it can exist in the long run, with all the hazards that implies: new package versions that potentially break the code base, implementation of new features in the global interface, changing key features of the UI or the back-end, and not to mention passing the code base along to someone who has not worked on the first version, and who is now in charge of developing the next version. And this, again, is hard to do without effective planning and efficient engineering. In fact, this new person might simply be you, a month from now. And \"You’ll be there in the future too, maintaining code you may have half forgotten under the press of more recent projects. When you design for the future, the sanity you save may be your own.10 "]
]
